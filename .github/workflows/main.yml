name: "Initial manual workflow test"

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment

jobs:
  build:
    name: Build & Release
    runs-on: macos-latest
    environment:
      name: ${{ inputs.environment }}

    steps:
      #1 Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      #2 Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '21'

      #3 Setup Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml # path to pubspec.yaml
      - run: flutter --version

      #4 Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      #4.a Setup Firebase
      - name: Install Firebase CLI
        run: |
          sudo npm i -g firebase-tools
      - name: Install FlutterFire
        run: |
          dart pub global activate flutterfire_cli  
          export PATH="$PATH":"$HOME/.pub-cache/bin"
      - name: Decode Google SA Json file
        run: |
          echo "${{ secrets.GOOGLE_SA_JSON_BASE64 }}" | base64 --decode > google_sa.json
      - name: Setup Firebase Project
        run: |
          flutterfire configure -y --project=${{ secrets.FIREBASE_PROJECT_ID }} --platforms=android,ios --android-package-name=${{ secrets.ANDROID_PACKAGE_NAME }} --ios-bundle-id=${{ secrets.IOS_BUNDLE_ID }} --ios-target="Runner" --ios-out="ios/GoogleService-Info.plist" --service-account=google_sa.json

      #5 Setup Keystore
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      #6 Building APK
      - name: Build APK
        run: flutter build apk --debug

      #7.a Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          DEV_CERTIFICATE_BASE64: ${{ secrets.DEV_CERTIFICATE_BASE64 }}
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          IOS_EXPORT_OPTIONS: ${{ secrets.IOS_EXPORT_OPTIONS }}
        run: |
          # create variables
          DEV_CERTIFICATE_PATH=$RUNNER_TEMP/dev_certificate.p12
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          IOS_EXPORT_OPTIONS_PATH=$RUNNER_TEMP/ExportOptions.plist
          
          # import certificate and provisioning profile from secrets
          echo -n "$DEV_CERTIFICATE_BASE64" | base64 --decode -o $DEV_CERTIFICATE_PATH
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo -n "$IOS_EXPORT_OPTIONS" | base64 --decode -o $IOS_EXPORT_OPTIONS_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $DEV_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      #7.b Build IPA ( IOS Build )
      - name: Build IPA
        run: |
          cd ios
          pod install --repo-update
          cd ..
          flutter build ipa --no-codesign
          mkdir -p build/ios/exports
          xcodebuild -exportArchive -archivePath build/ios/archive/Runner.xcarchive -exportOptionsPlist $IOS_EXPORT_OPTIONS_PATH -exportPath build/ios/exports

#      #9 Extract Version
#      - name: Extract version from pubspec.yaml
#        id: extract_version
#        run: |
#          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
#          echo "VERSION=$version" >> $GITHUB_ENV
#
#      #10 Check if Tag Exists
#      - name: Check if Tag Exists
#        id: check_tag
#        run: |
#          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
#            echo "TAG_EXISTS=true" >> $GITHUB_ENV
#          else
#            echo "TAG_EXISTS=false" >> $GITHUB_ENV
#          fi
#
#      #11 Modify Tag if it Exists
#      - name: Modify Tag
#        if: env.TAG_EXISTS == 'true'
#        id: modify_tag
#        run: |
#          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
#          echo "VERSION=$new_version" >> $GITHUB_ENV

#      #12 Upload to Firebase App Distribution
#      - name: Upload artifacts to Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1
#        with:
#          appId: ${{secrets.FIREBASE_APP_ID}}
#          serviceCredentialsFile: google_sa.json
#          groups: cdli-testers
#          file: build/app/outputs/flutter-apk/app-debug.apk

      #8.a Upload apk to Firebase App Distribution
      - name: Upload and Distribute App
        uses: mastersam07/firebase-app-distribution-action@v0.1
        with:
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
          appId: ${{ secrets.FIREBASE_APP_ID }}
          file: build/app/outputs/flutter-apk/app-debug.apk
          groups: cdli-testers

      #8.b Upload ipa to Firebase App Distribution
      - name: Upload and Distribute App
        uses: mastersam07/firebase-app-distribution-action@v0.1
        with:
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          file: 'build/ios/exports/Project Euphonia.ipa'
          groups: cdli-testers